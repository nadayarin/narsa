{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpclient, userAuthService) {\n      this.httpclient = httpclient;\n      this.userAuthService = userAuthService;\n      this.PATH_OF_API = 'http://localhost:8080';\n      this.requestHeader = new HttpHeaders({\n        'No-Auth': 'True'\n      });\n    }\n    login(loginData) {\n      return this.httpclient.post(this.PATH_OF_API + '/authenticate', loginData, {\n        headers: this.requestHeader\n      });\n    }\n    forUser() {\n      return this.httpclient.get(this.PATH_OF_API + '/forUser', {\n        responseType: 'text'\n      });\n    }\n    forAdmin() {\n      return this.httpclient.get(this.PATH_OF_API + '/forAdmin', {\n        responseType: 'text'\n      });\n    }\n    roleMatch(allowedRoles) {\n      const userRoles = this.userAuthService.getRoles();\n      if (userRoles != null && userRoles) {\n        for (const userRole of userRoles) {\n          for (const allowedRole of allowedRoles) {\n            if (userRole.roleName === allowedRole) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }\n    resetPassword(oldPassword, newPassword) {\n      return this.httpclient.post(`${this.PATH_OF_API}/api/password/reset`, {\n        oldPassword,\n        newPassword\n      });\n    }\n    getRoles() {\n      const headers = this.getAuthHeaders();\n      return this.httpclient.get(`${this.PATH_OF_API}/roles`, {\n        headers\n      });\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}