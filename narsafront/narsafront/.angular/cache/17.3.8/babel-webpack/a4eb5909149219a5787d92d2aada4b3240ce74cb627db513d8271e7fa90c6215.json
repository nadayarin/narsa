{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../_services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction ResetPasswordComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Old password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" New password is required and must be at least 6 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Passwords must match. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(formBuilder, userService, router) {\n      this.formBuilder = formBuilder;\n      this.userService = userService;\n      this.router = router;\n      this.errorMessage = '';\n      this.resetPasswordForm = this.formBuilder.group({\n        oldPassword: ['', Validators.required],\n        newPassword: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: this.mustMatch('newPassword', 'confirmPassword')\n      });\n    }\n    mustMatch(password, confirmPassword) {\n      return formGroup => {\n        const control = formGroup.controls[password];\n        const matchingControl = formGroup.controls[confirmPassword];\n        if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\n          return;\n        }\n        if (control.value !== matchingControl.value) {\n          matchingControl.setErrors({\n            mustMatch: true\n          });\n        } else {\n          matchingControl.setErrors(null);\n        }\n      };\n    }\n    onSubmit() {\n      if (this.resetPasswordForm.invalid) {\n        return;\n      }\n      const {\n        oldPassword,\n        newPassword\n      } = this.resetPasswordForm.value;\n      this.userService.resetPassword(oldPassword, newPassword).subscribe(() => {\n        this.router.navigate(['/login']); // Redirect after success\n      }, error => {\n        this.router.navigate(['/login']);\n      });\n    }\n    static #_ = this.ɵfac = function ResetPasswordComponent_Factory(t) {\n      return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetPasswordComponent,\n      selectors: [[\"app-reset-password\"]],\n      decls: 22,\n      vars: 6,\n      consts: [[1, \"reset-password-container\"], [3, \"ngSubmit\", \"formGroup\"], [\"for\", \"oldPassword\"], [\"id\", \"oldPassword\", \"type\", \"password\", \"formControlName\", \"oldPassword\"], [4, \"ngIf\"], [\"for\", \"newPassword\"], [\"id\", \"newPassword\", \"type\", \"password\", \"formControlName\", \"newPassword\"], [\"for\", \"confirmPassword\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\"], [\"type\", \"submit\", 3, \"disabled\"]],\n      template: function ResetPasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"reset-password works!\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\")(5, \"label\", 2);\n          i0.ɵɵtext(6, \"Old Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 3);\n          i0.ɵɵtemplate(8, ResetPasswordComponent_div_8_Template, 2, 0, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\")(10, \"label\", 5);\n          i0.ɵɵtext(11, \"New Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵtemplate(13, ResetPasswordComponent_div_13_Template, 2, 0, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\")(15, \"label\", 7);\n          i0.ɵɵtext(16, \"Confirm New Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 8);\n          i0.ɵɵtemplate(18, ResetPasswordComponent_div_18_Template, 2, 0, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"button\", 9);\n          i0.ɵɵtext(20, \"Reset Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(21, ResetPasswordComponent_div_21_Template, 2, 1, \"div\", 4);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"oldPassword\"].invalid && ctx.resetPasswordForm.controls[\"oldPassword\"].touched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"newPassword\"].invalid && ctx.resetPasswordForm.controls[\"newPassword\"].touched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].invalid && ctx.resetPasswordForm.controls[\"confirmPassword\"].touched);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.resetPasswordForm.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\".reset-password-container[_ngcontent-%COMP%]{width:300px;margin:auto}label[_ngcontent-%COMP%]{display:block;margin-bottom:5px}input[_ngcontent-%COMP%]{width:100%;padding:8px;margin-bottom:10px}button[_ngcontent-%COMP%]{width:100%;padding:10px;background-color:#4caf50;color:#fff;border:none;cursor:pointer}button[_ngcontent-%COMP%]:disabled{background-color:#ccc;cursor:not-allowed}\"]\n    });\n  }\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}